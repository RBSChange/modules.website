<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<style tal:replace="cssInclusion" />
<window title="Edit Bookmarks"
        orient="vertical"
	    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	    onload="bookmarksInit();">

	<script tal:replace="scriptInclusion" />

	<script type="text/javascript"><![CDATA[
			
		function getEditor()
		{
			return wToolkit.getDialogParam();
		}

        function bookmarksInit()
        {
            window.resizeBy(0, 10);
            var editor = this.getEditor();
            
      
            var handler = editor.focusedElement; 
            var displayList = document.getElementById('displayList');
            var propertyName = '__cmpref';
           
            var block = handler.block;
            var displayed = block.getAttribute(propertyName).split(';');
           
            for (var i = 0; i < displayed.length; i++)
            {
                var displayedData = displayed[i].split(':');
                if (displayedData.length == 2)
                {
                    var label = decodeURIComponent(trim(displayedData[1]));
                    var value = decodeURIComponent(trim(displayedData[0]));
                    displayList.appendItem(label, value);
                }
            }
            document.getElementById('raw').selectedIndex = 1;
            refreshAvailable();
        }

        function refreshAvailable()
        {
            var availableList = document.getElementById('availableList');
            var displayList = document.getElementById('displayList');
            var displayed = [];
            for(var i = 0; i < displayList.childNodes.length; i++)
            {
                displayed.push(displayList.childNodes[i].value);
            }
            while (availableList.childNodes.length > 0)
            {
                availableList.removeItemAt(0);
            }
            
            var editor = this.getEditor();
            var handler = editor.focusedElement;
            var pageContent = editor.getXMLContentString();   

            var anchorsRegExp = /<a([^>]*)>/gi;
            while (anchorMatch = anchorsRegExp.exec(pageContent))
            {
            	var attributes = anchorMatch[1];
            	try
            	{
	            	var name = attributes.match(/ name="([^"]+)"/i)[1];
	            	var title = attributes.match(/ title="([^"]+)"/i)[1];
	                if (!in_array(name, displayed))
	                {
	                    availableList.appendItem(title, name);
	                }
	            }
	            catch (e)
	            {
	            	//Normal link
	            }
            }
        }

        function bookmarksSave()
        {
        	try
        	{
	            var editor = this.getEditor();
	            var handler = editor.focusedElement;
	            
	            var displayList = document.getElementById('displayList');
	            var displayed = [];
	            for(var i = 0; i < displayList.childNodes.length; i++)
	            {
	                displayed.push(
	                    encodeURIComponent(displayList.childNodes[i].value)
	                    + ': '
	                    + encodeURIComponent(displayList.childNodes[i].label)
	                );
	            }
	            var returnValue = displayed.join('; ') + ';';
	            var propertyname = "__cmpref";
	            handler.block.setBlockAttribute(propertyname, null, returnValue);
	            handler.block.loadContent();
	            
	            wToolkit.setDialogReturnValue(returnValue);
	            self.close();
	         }
             catch (e)
             {
                 wCore.error("bookmarksSave", [], e);
             }
        }

        function handleAvailableSelect()
        {
            var list = document.getElementById('availableList');
            if (list.selectedCount > 0)
            {
                document.getElementById('add').setAttribute('disabled', 'false');
            }
            else
            {
                document.getElementById('add').setAttribute('disabled', 'true');
            }
        }

        function handleDisplaySelect()
        {
            var list = document.getElementById('displayList');
            var selected = list.selectedItems[0];
            if (list.selectedCount > 0)
            {
                if (list.getIndexOfItem(selected) == 0)
                {
                    document.getElementById('moveUp').setAttribute('disabled', 'true');
                }
                else
                {
                    document.getElementById('moveUp').setAttribute('disabled', 'false');
                }
                document.getElementById('remove').setAttribute('disabled', 'false');
                if (list.getIndexOfItem(selected) == (list.getRowCount() - 1))
                {
                    document.getElementById('moveDown').setAttribute('disabled', 'true');
                }
                else
                {
                    document.getElementById('moveDown').setAttribute('disabled', 'false');
                }
            }
            else
            {
                document.getElementById('moveUp').setAttribute('disabled', 'true');
                document.getElementById('remove').setAttribute('disabled', 'true');
                document.getElementById('moveDown').setAttribute('disabled', 'true');
            }
        }

        function addItems()
        {
            var fromList = document.getElementById('availableList');
            var toList = document.getElementById('displayList');
            var selected = fromList.selectedItems;
            var removeIndex = []
            for (var i = 0; i < fromList.selectedCount; i++)
            {
                toList.appendItem(selected[i].label, selected[i].value);
                removeIndex.push(fromList.getIndexOfItem(selected[i]));
            }
            for (var i = 0; i < removeIndex.length; i++)
            {
                fromList.removeItemAt(removeIndex[0]);
            }
        }

        function moveItemUp()
        {
            var list = document.getElementById('displayList');
            var selected = list.selectedItems[0];
            var itemIndex = list.getIndexOfItem(selected);
            var newItem = list.insertItemAt(itemIndex - 1, selected.label, selected.value);
            list.removeItemAt(itemIndex + 1);
            list.clearSelection();
            list.addItemToSelection(newItem);
        }

        function moveItemDown()
        {
            var list = document.getElementById('displayList');
            var selected = list.selectedItems[0];
            var itemIndex = list.getIndexOfItem(selected);
            if (itemIndex == (list.getRowCount() - 2))
            {
                var newItem = list.appendItem(selected.label, selected.value);
            }
            else
            {
                var newItem = list.insertItemAt(itemIndex + 2, selected.label, selected.value);
            }
            list.removeItemAt(itemIndex);
            list.clearSelection();
            list.addItemToSelection(newItem);
        }

        function removeItem()
        {
            var list = document.getElementById('displayList');
            var selected = list.selectedItems[0];
            var itemIndex = list.getIndexOfItem(selected);
            list.removeItemAt(itemIndex);
            refreshAvailable();
        }
	]]></script>

	<vbox flex="1">
        <toolbox flex="1" class="change-toolbox">
            <grid flex="1">
                <columns>
                    <column flex="2"/>
                    <column flex="1"/>
                </columns>
                <rows>
                    <toolbar>
                        <hbox align="center" flex="1">
                            <spacer flex="1"/>
                            <image change:icon="bookmarks/command shadow" />
                            <label i18n:attributes="value &modules.uixul.bo.layout.BookmarksBlock;" style="font-weight: bold !important; font-size: 16px !important;"/>
                            <spacer flex="1"/>
                            <label i18n:attributes="value &modules.uixul.bo.layout.Available-inLabel;"/>
                            <menulist id="raw" oncommand="refreshAvailable();">
                              <menupopup>
                                <menuitem i18n:attributes="label &modules.uixul.bo.layout.Available-in-whole-page;" value="true" />
                                <menuitem i18n:attributes="label &modules.uixul.bo.layout.Available-in-richtext-only;" value="false" />
                              </menupopup>
                            </menulist>
                        </hbox>
                    </toolbar>
                    <label control="availableList" value="availableBookmarks" i18n:attributes="value &modules.uixul.bo.layout.AvailableBookmarksLabel;" style="font-weight: bold; font-size: 12px;" />
                    <row align="center">
                         <listbox id="availableList" seltype="multiple" onselect="handleAvailableSelect();" />
                         <button id="add" change:icon="navigate_plus/small shadow" label="Add" i18n:attributes="label &modules.uixul.bo.layout.Add;" orient="vertical" oncommand="addItems();" disabled="true" />
                    </row>
                    <label control="displayList" value="displayedBookmarks" i18n:attributes="value &modules.uixul.bo.layout.DisplayedBookmarksLabel;" style="font-weight: bold; font-size: 12px;" />
                    <row align="center">
                         <listbox id="displayList" onselect="handleDisplaySelect();" />
                         <vbox>
                            <button id="moveUp" change:icon="navigate_up/small shadow" label="Move up" i18n:attributes="label &modules.uixul.bo.layout.MoveUp;" orient="vertical" oncommand="moveItemUp();" disabled="true" />
                            <button id="remove" change:icon="navigate_minus/small shadow" label="Remove" i18n:attributes="label &modules.uixul.bo.layout.Remove;" orient="vertical" oncommand="removeItem();" disabled="true" />
                            <button id="moveDown" change:icon="navigate_down/small shadow" label="Move down" i18n:attributes="label &modules.uixul.bo.layout.MoveDown;" orient="vertical" oncommand="moveItemDown();" disabled="true" />
                         </vbox>
                    </row>
                    <hbox>
                        <button flex="1" change:icon="navigate_check/small shadow" label="Apply" i18n:attributes="label &modules.uixul.bo.layout.ApplySpaced;" oncommand="bookmarksSave();" />
                        <button change:icon="delete2/small shadow" label="Cancel" i18n:attributes="label &modules.uixul.bo.general.buttons.CancelSpaced;" oncommand="self.close();" />
                    </hbox>
                </rows>
            </grid>
        </toolbox>
	</vbox>
</window>