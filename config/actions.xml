<?xml version="1.0"?>
<actions>

	<action name="onModuleInit">
		<body><![CDATA[
			this.executeJSON("CheckModuleInit", {cmpref: this.mRootFolderId, lang:this.getContextLang()});
		]]></body>
	</action>
	
	<action name="onCheckModuleInitSuccess">
		<parameter name="result" />
		<body><![CDATA[
			if (result.contents.websites.length == 0)
			{
				wCore.debug(wCore.dump(result.contents));
				var notifZone = this.getElementByAnonId('initnotification');
				if (result.contents.createwebsite)
				{
					var insertWebsiteAction = this.getActionInfo('createWebsite');
					
					var callback = function (notif, bI) {bI.module.createDocumentEditor('modules_website_website', bI.module.mRootFolderId)};
					var buttons = [{callback:callback, label:insertWebsiteAction.label, accessKey:"", module: this}];
					notifZone.appendNotification("&amp;modules.website.bo.general.notification.No-default-website;", 
						'createwebsite', wToolkit.getIcon('website', 'small'), notifZone.PRIORITY_CRITICAL_BLOCK, buttons);
				}
				else
				{
					notifZone.appendNotification("&amp;modules.website.bo.general.notification.No-default-website;", 
						'nodefaultwebsite', wToolkit.getIcon('website', 'small'), notifZone.PRIORITY_WARNING_LOW, []);
				}
			
			}
		]]></body>
	</action>
				
	<action name="checkLink">
		<parameter name="listWidget"/>
		<body><![CDATA[
			var selectedIds = listWidget.getSelectedIds();
			var lang = this.getContextLang();

			var proceedAll = false;
			var proceedSelected = false;

			if (selectedIds.length == 0)
			{
				proceedAll = true;
			}
			else if (selectedIds.length > 0)
			{
				var prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].getService(Components.interfaces.nsIPromptService);
				var check = {value: false};
				var flags = prompts.BUTTON_TITLE_IS_STRING * prompts.BUTTON_POS_0 +
							prompts.BUTTON_TITLE_IS_STRING * prompts.BUTTON_POS_1;

				var button = prompts.confirmEx(window,
					"&amp;modules.website.bo.actions.Check-link-confirm;",
					"&amp;modules.website.bo.actions.Check-link-confirm-selected-or-all;",
					flags,
					"&amp;modules.website.bo.actions.Regenerate-selected;",
					"&amp;modules.website.bo.actions.Regenerate-all;",
					null, null, check
				);

				switch (button)
				{
					case 0:
						proceedSelected = true;
						break;

					case 1:
						proceedAll = true;
						break;
				}
			}

			if (proceedAll)
			{
				if (window.confirm("&amp;modules.website.bo.actions.Check-link-confirm-all;"))
				{
					wToolkit.dialog("website", "CheckLinks", {lang: lang }, null, null, true);
				}
			}
			else if (proceedSelected)
			{
			   wToolkit.dialog("website", "CheckLinks", {lang: lang, cmpref: selectedIds }, null, null, true);
			}
		]]></body>
	</action>

	<action name="setAsIndexPage">
		<parameter name="listWidget"/>
		<body><![CDATA[
			var id = listWidget.getSelectedIds()[0];
			var lang = this.getContextLang();
			this.executeJSON("SetTopicIndexPage", {cmpref: id, lang: lang });
		]]></body>
	</action>
	<action name="setAsIndexPageIsActive">
		<parameter name="itemData"/>
		<body><![CDATA[
			return itemData.isIndexPage !== 'isIndexPage' && itemData.isHomePage !== 'isHomePage';
		]]></body>
	</action>
	
	<action name="setAsIndexPageRef">
		<parameter name="listWidget"/>
		<body><![CDATA[
			var id = listWidget.getSelectedIds()[0];
			var lang = this.getContextLang();
			this.executeJSON("SetTopicIndexPage", {cmpref: id, lang: lang, PageRef: 'true' });
		]]></body>
	</action>
	<action name="setAsIndexPageRefIsActive">
		<parameter name="itemData"/>
		<body><![CDATA[
			return itemData.hasPageRef;
		]]></body>
	</action>	
	
   
	<action name="removeIndexPage">
		<parameter name="listWidget"/>
		<body><![CDATA[
			var id = listWidget.getSelectedIds()[0];
			var lang = this.getContextLang();
			this.executeJSON("RemoveIndexPage", {cmpref: id, lang: lang});
		]]></body>
	</action>
	<action name="removeIndexPageIsActive">
		<parameter name="itemData"/>
		<body><![CDATA[
			return itemData.isIndexPage === 'isIndexPage';
		]]></body>
	</action>
  
	<action name="setAsHomePage">
		<parameter name="listWidget"/>
		<body><![CDATA[
			var id = listWidget.getSelectedIds()[0];
			var lang = this.getContextLang();
			if (confirm("&amp;modules.website.bo.actions.Set-as-home-page-confirm;"))
			{
				this.executeJSON("SetHomePage", {cmpref: id, lang: lang});
			}
		]]></body>
	</action>
	<action name="setAsHomePageIsActive">
		<parameter name="itemData"/>
		<body><![CDATA[
			return itemData.isHomePage !== 'isHomePage';
		]]></body>
	</action>
  
   
	<action name="createPage">
		<parameter name="listWidget"/>
		<body><![CDATA[
			this.createDocumentEditor('modules_website_page', listWidget.getSelectedItems()[0].id);
		]]></body>
	</action>
  
	<action name="createExternalPage">
		<parameter name="listWidget"/>
		<body><![CDATA[
			this.createDocumentEditor('modules_website_pageexternal', listWidget.getSelectedItems()[0].id);
		]]></body>
	</action>
  
	<action name="createTopic">
		<parameter name="listWidget"/>
		<body><![CDATA[
			this.createDocumentEditor('modules_website_topic', listWidget.getSelectedItems()[0].id);
		]]></body>
	</action>
    
	<action name="createWebsite">
		<parameter name="listWidget"/>
		<body><![CDATA[
			this.createDocumentEditor('modules_website_website', listWidget.getSelectedItems()[0].id);
		]]></body>
	</action>
  
	<action name="createEmptyPageVersionFromPage">
		<parameter name="listWidget"/>
		<body><![CDATA[
			var editor = this.getDocumentEditor('modules_website_pageversion');
			editor.removeAttribute('duplicate');
			this.createDocumentEditor('modules_website_pageversion', listWidget.getSelectedItems()[0].id);
		]]></body>
	</action>
  
	<action name="createPageVersionFromPage">
		<parameter name="listWidget"/>
		<body><![CDATA[
			var editor = this.getDocumentEditor('modules_website_pageversion');
			editor.setAttribute('duplicate', 'true');
			this.createDocumentEditor('modules_website_pageversion', listWidget.getSelectedItems()[0].id);
		]]></body>
	</action>
  
	<action name="createMenu">
		<parameter name="listWidget"/>
		<body><![CDATA[
			this.createDocumentEditor('modules_website_menu', listWidget.getSelectedItems()[0].id);
		]]></body>
	</action>
  
	<action name="createMenuitemfunction">
		<parameter name="listWidget"/>
		<body><![CDATA[
			this.createDocumentEditor('modules_website_menuitemfunction', listWidget.getSelectedItems()[0].id);
		]]></body>
	</action>
  
	<action name="createMenuitemtext">
		<parameter name="listWidget"/>
		<body><![CDATA[
			this.createDocumentEditor('modules_website_menuitemtext', listWidget.getSelectedItems()[0].id);
		]]></body>
	</action>
	
	<action name="createMenuitemdocument">
		<parameter name="listWidget"/>
		<body><![CDATA[
			this.createDocumentEditor('modules_website_menuitemdocument', listWidget.getSelectedItems()[0].id);
		]]></body>
	</action>
  
	<action name="addToMenu">
		<parameter name="listWidget"/>
		<parameter name="dropInfos"/>
		<body><![CDATA[
			var lang = this.getContextLang();
			wCore.debug('addToMenu' + wCore.dump(dropInfos));
			// dropInfos = {action:'', cmpref:0, parentid:0, beforeid:0, afterid:0};
			this.execute("AddToMenu", "AddToMenu", {cmpref: dropInfos.cmpref, lang: lang, destref: dropInfos.parentid});
		]]></body>
	</action>
  
	<action name="openPage">
		<parameter name="listWidget"/>
		<body><![CDATA[
			var document = listWidget.getSelectedItems()[0];
			var href = wCore.buildeServerUrl('website', 'BoDisplay', {cmpref:document.id, lang:this.getContextLang()});
			window.open(href, document.label, "menubar=yes, location=yes, toolbar=yes, resizable=yes, scrollbars=yes, status=yes");
		]]></body>
	</action>
	<action name="openPageIsActive">
		<parameter name="itemData"/>
		<body><![CDATA[
			return itemData.langAvailable;
		]]></body>
	</action> 
    
	<action name="editPageContent">
		<parameter name="listWidget"/>
		<body><![CDATA[
			var document = listWidget.getSelectedItems()[0];
			this.getModuleHeader().setEditedItem(document);
			var lang = document.fromEditor ? document.lang : this.getContextLang();
			this.editPageContentFromDocument(document.id, lang);
		]]></body>
	</action>
	<action name="editPageContentIsActive">
		<parameter name="itemData"/>
		<body><![CDATA[
			return itemData.langAvailable;
		]]></body>
	</action>
	
	<action name="editPageContentFromDocument">
		<parameter name="documentId"/>
		<parameter name="lang"/>
		<body><![CDATA[			
			var params = {cmpref: documentId, lang: lang};
			var editUrl =  wToolkit.buildXulURL('website', 'EditContent', params, true);

			var pageDeck = this.getElementByAnonId("pageDeck");
			pageDeck.removeAttribute('editorLoaded');

			var designFrame = this.getElementByAnonId("designFrame");    			
			designFrame.setAttribute("src", editUrl);
			pageDeck.selectedIndex = 3;

			window.setTimeout(function(){
				if (pageDeck.hasAttribute('editorLoaded')) {wCore.debug("editor is loaded"); return;}
				designFrame.setAttribute("src", "about:blank"); 
				alert("&modules.uixul.bo.general.PageEditorLoadError;");  
				pageDeck.selectedIndex = 0;
				}, 30000);			
		]]></body>
	</action>
	  
	<action name="refreshFromEditor">
		<body><![CDATA[
			this.getElementByAnonId("pageDeck").setAttribute('selectedIndex', 0);
			this.getElementByAnonId("designFrame").setAttribute('src', 'about:blank');
			this.refreshMainViewDeck();
		]]></body>
	</action>

	<action name="backToContentEditing">
		<body><![CDATA[
			this.getElementByAnonId('pageDeck').setAttribute('selectedIndex', 1);
			this.getElementByAnonId("previewFrame").setAttribute('src', 'about:blank');
			var wincontent = new XPCNativeWrapper(this.getElementByAnonId("designFrame").contentWindow);
			   wincontent.wrappedJSObject.backToContentEditing();
		]]></body>
	</action>
  
	<action name="removeFromMenu">
		<parameter name="listWidget"/>
		<body><![CDATA[
			var document = listWidget.getSelectedItems()[0];
			this.executeJSON("RemoveFromMenu", {cmpref: document.id});
		]]></body>
	</action>
	
	<action name="onRemoveFromMenuSuccess">
		<parameter name="result"/>
		<body><![CDATA[
			wToolkit.setNotificationMessage('&modules.website.bo.actions.Remove-from-menu-Success; : ' + result.contents.deleteCount, wToolkit.OK);
			// TODO: uncomment when refresh handles ressourceTrees refresh
			// this.refresh();
		]]></body>
	</action>
     
	<action name="orderMenuItems">
		<parameter name="listWidget"/>
		<body><![CDATA[
			this.openOrderChildrenPanel(listWidget, 'menuItem');
		]]></body>
	</action>
  
	<action name="openTreeNodeOrder">
		<parameter name="listWidget" />
		<body><![CDATA[
			this.openOrderChildrenPanel(listWidget, null, ['modules_generic/folder', 'modules_website/website', 'modules_website/topic', 'modules_website/page', 'modules_website/pageexternal']);
		]]></body>
	</action>
	
	<action name="initDefaultStruct">
		<parameter name="listWidget" />
		<body><![CDATA[
			try
			{
				var documentId = listWidget.getSelectedItems()[0].id;
				var lang = this.getContextLang();
				var callback = function (pageTemplateName) {
					return wCore.executeJSON('website', 'InitializeStructure', { cmpref: documentId, moduleName: 'website', scriptName: 'sample', pageTemplateName: pageTemplateName, lang: lang}, null, true);
				};
				getController().openModalDialog(this, 'InitializeStructure', {documentId: documentId, module: this, callback: callback });
			}
			catch (e)
			{
				wCore.error('website.initDefaultStruct', [], e);
			}
		]]></body>
	</action>
</actions>